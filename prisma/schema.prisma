datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model UserEvent {
    id               String  @id @default(auto()) @map("_id") @db.ObjectId
    userId           String  @db.ObjectId
    eventId          String  @db.ObjectId
    attendanceStatus String
    rating           String?
    review           String?
    isBookmarked     Boolean
    user             User    @relation(fields: [userId], references: [id])
    event            Event   @relation(fields: [eventId], references: [id])
}

model Event {
    id             String      @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    localDateTime  String
    cityCountry    String
    venue          String
    maxAttendance  Int
    description    String?
    organiserEmail String?
    organiser      User?       @relation(fields: [organiserEmail], references: [email], onDelete: Cascade)
    users          UserEvent[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    email           String?          @unique
    emailVerified   DateTime?
    image           String?
    joinDate        DateTime         @default(now())
    location        String?
    dob             DateTime?
    userPreferences UserPreferences?
    organisedEvents Event[]
    accounts        Account[]
    sessions        Session[]
    events          UserEvent[]
}

model UserPreferences {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @unique @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    // techStacks String[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
